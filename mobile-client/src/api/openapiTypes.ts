/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/mobile/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Register a mobile user (phone-first) */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["RegisterRequest"];
                };
            };
            responses: {
                /** @description Auth token */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AuthResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/mobile/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Login and receive a token */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        phone: string;
                        pin: string;
                    };
                };
            };
            responses: {
                /** @description Auth token */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AuthResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/mobile/transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List recent transactions for the authenticated user's company */
        get: {
            parameters: {
                query?: {
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of transactions */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TransactionResponse"][];
                    };
                };
            };
        };
        put?: never;
        /** Create a transaction (mobile) */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["TransactionPayload"];
                };
            };
            responses: {
                /** @description Created transaction */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TransactionResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/mobile/sync": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Batch sync operations from device */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["SyncRequest"];
                };
            };
            responses: {
                /** @description Applied operations and conflict list */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SyncResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        RegisterRequest: {
            /** @description Local phone number in E.164 (recommended) */
            phone: string;
            name: string;
            /** @description Short PIN used by the mobile app (server may map to credentials) */
            pin: string;
        };
        AuthResponse: {
            token?: string;
            /** Format: date-time */
            expires_at?: string;
        };
        TransactionPayload: {
            /** @enum {string} */
            type?: "income" | "expense";
            /** @description Amount in minor units (e.g., cents) */
            amount_minor?: number;
            /** Format: date */
            date?: string;
            notes?: string;
            category_id?: number;
        };
        TransactionResponse: {
            id?: number;
            type?: string;
            amount?: number;
            /** Format: date */
            date?: string;
            notes?: string;
        };
        SyncRecord: {
            /** @description Client-generated UUID for idempotency */
            client_id: string;
            /** @enum {string} */
            op: "create" | "update" | "delete";
            /** @description Operation payload (see TransactionPayload for transaction records) */
            payload: Record<string, never>;
            /**
             * Format: date-time
             * @description Optional timestamp representing client's last edit time
             */
            client_updated_at?: string;
        };
        SyncRequest: {
            device_id: string;
            records: components["schemas"]["SyncRecord"][];
        };
        SyncAppliedItem: {
            client_id?: string;
            server_id?: number;
            op?: string;
        };
        SyncConflictItem: {
            client_id?: string;
            /** @description One of no_mapping, missing_server_record, conflict, invalid_record, unknown_op */
            reason?: string;
            /** Format: date-time */
            server_updated_at?: string;
        };
        SyncResponse: {
            applied?: components["schemas"]["SyncAppliedItem"][];
            conflicts?: components["schemas"]["SyncConflictItem"][];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
